program,arithexp,arraydecl,assignstmt,boolconst,boolexp,boolexpform,BOOLRELATION,boolterm,cmpdcondition,cmpdstmt,condition,conditionform,conststring,declaration,decllist,dowhilestmt,EQRELATION,expression,factor,groupstmt,ifstmt,index,iostmt,noconst,RELATION,repeatstmt,simplstmt,stmt,stmtlist,stringexp,stringterm,structstmt,term,type
and,BOOLEAN,do,equals,IDENTIFIER,if,inputLine,INTEGER,is,LIST,main,outputString,or,not,repeat,STRING,+,-,*,/,<,<=,=,>,>=,==,!=,CONST,?,[,],{,},;,^,(,)
program:main{decllist;cmpdstmt;}
decllist:declaration|declaration;decllist
declaration:typeIDENTIFIER
type:type1|arraydecl
type1:BOOLEAN|INTEGER|"STRING"
arraydecl:type1LIST
cmpdstmt:stmtlist
stmtlist:stmt|stmt;stmtlist
stmt:simplstmt|structstmt
simplstmt:assignstmt|iostmt
assignstmt:IDENTIFIER=expression|IDENTIFIER[index]=expression
index:IDENTIFIER|noconst
iostmt:inputLine(IDENTIFIER)|outputString(IDENTIFIER)
groupstmt:simplstmt|{stmtlist;}
structstmt:cmpdstmt|ifstmt|dowhilestmt|repeatstmt
repeatstmt:repeat(expression)^stmt|repeat(expression)^cmpdstmt
ifstmt:iscmpdcondition?groupstmt
dowhilestmt:do{cmpdstmt}repeatifcmpdcondition
cmpdcondition:condition|notcondition|not(cmpdcondition)|conditionformBOOLRELATIONconditionform
conditionform:cmpdcondition|(cmpdcondition)
condition:boolexp
RELATION:<|<=|>=|>|EQRELATION
BOOLRELATION:and|or|EQRELATION
EQRELATION:==|!=|equals|different
expression:boolexp|arithexp|stringexp
arithexp:termorder2oparithexp|term
term:termorder1opfactor|factor
factor:(arithexp)|IDENTIFIER|noconst
order2op:+|-
order1op:*|/
stringexp:stringexp+stringterm|stringterm
stringterm:IDENTIFIER|conststring
boolexp:boolterm|boolexpformBOOLRELATIONboolexpform|arithexpRELATIONarithexp|stringexpRELATIONstringexp
boolexpform:boolexp|"("boolexp")"
boolterm:IDENTIFIER|boolconst